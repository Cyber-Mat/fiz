(()=>{var e={842:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,"body{background:linear-gradient(to right top, rgba(30,39,46,0.8), #1e272e)}.container{display:grid;grid-template-columns:20% 80%;grid-template-rows:4rem 1fr;max-width:95rem;min-height:55rem;margin:8rem auto;background-color:#fff;box-shadow:0 2rem 6rem rgba(0,0,0,0.3);position:relative}@media only screen and (max-width: 62.5em){.container{grid-template-columns:22% 78%}}.main{display:grid;grid-template-columns:40% 60%;grid-column-gap:1rem}.header{grid-row:1/2;grid-column:2/-1;height:100%;width:100%}.sidebar{grid-row:1/-1;grid-column:1/2;height:100%;width:100%}*,*::before,*::after{padding:0;margin:0;box-sizing:inherit}html{font-size:62.5%}@media only screen and (max-width: 62.5em){html{font-size:56.25%}}@media only screen and (max-width: 56.25em){html{font-size:50%}}@media only screen and (max-width: 50em){html{font-size:43.75%}}body{box-sizing:border-box;font-family:\" Lato \",sans-serif;font-size:1.4rem;font-weight:300;line-height:1.6;color:#202124}.icon{display:block;height:2rem;width:2rem;fill:#202124}input,input:active,input:focus{border:none;outline:none}.cover{position:absolute;top:0;left:0;z-index:1000;width:100%;height:100%;background-color:transparent}.cursor{cursor:pointer}.blue{background-color:#1b9cfc}.yellow{background-color:#6ab04c}.green{background-color:#f53b57}.pink{background-color:#1e272e}.red{background-color:#eb4d4b}.purple{background-color:#be2edd}.show{opacity:1;visibility:visible}.hide{opacity:0;visibility:hidden}::-webkit-input-placeholder{color:rgba(51,51,51,0.6)}.popup{opacity:0;visibility:hidden;position:absolute;top:0;left:0;z-index:1000;height:100%;width:100%;background-color:rgba(51,51,51,0.3);-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px)}.header{display:grid;grid-template-columns:1fr 8rem 18rem;justify-items:center;align-items:center;padding:0 2rem;background-color:rgba(180,196,206,0.1);background-color:#eb4d4b;color:#fff}.header .icon{fill:#fff}.header__search{display:flex;justify-items:center;align-items:center;width:100%}.header__search input{width:100%;height:4rem;border:none;background-color:transparent;color:#fff}.header__search input:active,.header__search input:focus{outline:none}.header__search .search-icon{margin-right:1rem;width:1.5rem;height:1.5rem}.header__notif .notif-icon{fill:#d4d4d4}.header__user{display:flex;justify-self:end;justify-content:center;align-items:center}.header__user--img{margin-right:1rem;width:2rem;height:2rem}.header__user--img .image{display:block;width:2rem;height:2rem;-o-object-fit:cover;object-fit:cover;border-radius:0.5rem}.header__user--name{font-weight:400}.header__user--menu{margin-left:1rem}.sidebar{padding:1rem 2rem;border-right:1.5px #bebebe solid;display:grid;grid-template-rows:10% -webkit-min-content 1fr -webkit-min-content;grid-template-rows:10% min-content 1fr min-content;grid-row-gap:4rem}.sidebar__logo{color:transparent;font-size:4rem;font-weight:700;background:linear-gradient(to right bottom, #1e272e, #eb4d4b);-webkit-background-clip:text;background-clip:text}.sidebar__nav{display:grid;grid-template-rows:repeat(5, -webkit-min-content);grid-template-rows:repeat(5, min-content);grid-row-gap:2rem}.sidebar__nav .icon{height:1.5rem;width:1.5rem}.sidebar__nav>div{display:grid;grid-template-columns:10% 90%;grid-column-gap:1.5rem;align-items:center;text-transform:capitalize}.sidebar__overview .icon{fill:#1b9cfc;height:2rem;width:2rem}.sidebar__today .icon{fill:#6ab04c}.sidebar__important .icon{fill:#f53b57}.sidebar__scheduled .icon{fill:#1e272e}.sidebar__done .icon{fill:#be2edd}.sidebar__tag{display:flex;flex-direction:column}.sidebar__tag--item{display:grid;grid-template-columns:-webkit-min-content 1fr -webkit-min-content;grid-template-columns:min-content 1fr min-content;justify-content:space-between;align-items:center;margin-bottom:1rem;position:relative;cursor:pointer}.sidebar__tag--item .tag-color{height:1rem;width:1rem;border-radius:2px;margin-right:2rem}.sidebar__tag--item .tag-count{position:relative;color:#fff;z-index:100;font-size:1rem}.sidebar__tag--item .tag-count::after{display:block;content:'';position:absolute;top:0;right:0;transform:translate(30%, -5%);z-index:-1;height:1.5rem;width:1.5rem;border-radius:100%;background-color:rgba(30,39,46,0.5)}.sidebar__add{justify-self:center;margin-top:-6rem;height:4rem;width:4rem;display:flex;justify-content:center;align-items:center;background-color:#eb4d4b;border-radius:100%;box-shadow:0 0.5rem 1rem rgba(51,51,51,0.1);cursor:pointer}.sidebar__add-btn{fill:#fff}.blue{background-color:#1b9cfc}.yellow{background-color:#6ab04c}.red{background-color:#f53b57}.form{opacity:0;visibility:hidden;display:flex;flex-direction:column;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);z-index:10000}.form__input{background-color:#fff;color:rgba(30,39,46,0.7);padding:1rem;border-radius:5px;margin-bottom:1rem;width:25rem}.form__input:hover{box-shadow:0 0.5rem 1rem rgba(51,51,51,0.1)}.form__label{font-size:1.4rem;color:#1e272e;font-weight:700}.form__desc{padding:1rem;height:10rem;outline:none;border:none}.form__desc:active,.form__desc:focus{outline:none;border:none}.submit-btn{padding:1rem 2rem;box-shadow:0 0.5rem 1rem rgba(51,51,51,0.1);font-weight:700;margin-top:1rem;background:linear-gradient(to right, #eb4d4b, #a73533);color:#fff;cursor:pointer;transition:all 0.5s}.submit-btn:hover{background:linear-gradient(to right, rgba(235,77,75,0.7), rgba(167,53,51,0.8))}.submit-btn:hover:active{transform:translateY(2px)}.close-popup{position:absolute;top:-2rem;right:-2rem;font-size:1.6rem;font-weight:700;color:red;cursor:pointer}.list{border-right:1.5px #bebebe solid;position:relative}.list__header{padding:1rem 2rem;border-bottom:2px solid #1b9cfc;display:flex;justify-content:space-between}.list__content{display:flex;flex-direction:column;height:90%}.list__item{padding:1.5rem 2rem;border-bottom:1.5px rgba(190,190,190,0.3) solid;display:grid;grid-template-columns:2rem 1fr 1rem 1rem;align-items:center;position:relative}.list__item:hover{box-shadow:0 0.5rem 1rem rgba(51,51,51,0.1);cursor:pointer}.list__item .icon{height:1rem;width:1rem}.list__item .star-icon{position:relative;z-index:10000}.list__item .delete{position:relative;z-index:10000;margin-left:1rem;color:#202124}.list__item--description{display:flex;flex-direction:column;margin-left:2rem}.list__item--description .bottom{display:flex;align-items:center;text-transform:capitalize;font-size:0.9rem}.list__item--description .bottom>.icon{margin-right:0.5rem}.list__item--description .bottom>span{margin-right:2rem}.list__item--description .bottom .time-icon{fill:#f53b57;position:relative;z-index:10000}.list__item--description .bottom .notif-icon{fill:#1b9cfc;position:relative;z-index:10000}.list__item .done__icon-div{height:2rem;width:2rem;border-radius:100%;border:1.5px rgba(190,190,190,0.3) solid;display:flex;justify-content:center;align-items:center;position:relative;z-index:10000}.list__item .done__icon-div .icon{fill:#27ae60;transition:all 0.5s}#red{fill:#eb4d4b}#black{fill:#202124}.page{position:absolute;bottom:1rem;right:3rem;display:grid;grid-template-columns:repeat(2, -webkit-min-content);grid-template-columns:repeat(2, min-content);grid-column-gap:2rem}.page>a{display:none;cursor:pointer;color:#eb4d4b}.page>a:hover{color:#000}.detail{display:grid;grid-template-columns:4rem 1fr;grid-column-gap:1rem;padding:1rem;padding-top:3rem;padding-right:3rem}.detail__icon{height:3rem;width:3rem;border-radius:100%;display:flex;justify-content:center;align-items:center}.detail__icon .icon{fill:#fff;transition:all 0.5s}.detail__header{display:grid;grid-template-rows:repeat(2, 50%);grid-row-gap:0.5rem}.detail__header .top{display:flex;justify-content:space-between;align-items:flex-start;align-items:center;font-size:1.4rem;font-weight:700}.detail__header .top .icon-div{display:grid;grid-template-columns:repeat(2, 1fr);grid-column-gap:1rem}.detail__header .top .icon-div .icon{height:1.5rem;width:1.5rem}.detail__header .bottom{display:grid;grid-template-columns:10rem 20rem;font-size:1rem;color:#eb4d4b}.detail__header .bottom>div{display:flex;align-items:center}.detail__header .bottom>div .icon{margin-right:0.5rem;height:1.2rem;width:1.2rem;fill:#eb4d4b}.detail__header .bottom .date{margin-right:-10rem}.detail__text{padding-top:2rem;padding-right:2rem;font-size:1.2rem}.detail__step{padding-top:2rem}.detail__step--add{display:block;margin-bottom:1rem;color:#1b9cfc;cursor:pointer}.detail__step--item{margin-bottom:0.5rem;display:grid;grid-template-columns:repeat(2, -webkit-max-content);grid-template-columns:repeat(2, max-content);grid-column-gap:1rem;align-items:center}.login__form{display:flex;flex-direction:column;align-items:center;justify-content:center;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);z-index:10000;padding:10rem;background-color:#fff;color:rgba(30,39,46,0.7)}.login__img{margin-bottom:2rem}.login__text{margin-bottom:2rem}.login__btn{border:none;outline:none;padding:1rem 2rem;box-shadow:0 0.5rem 1rem rgba(51,51,51,0.1);font-weight:700;background-color:#0097e6;color:#fff;cursor:pointer;transition:all 0.5s}.login__btn:hover{background-color:#016699}.login__btn:hover:active{transform:translateY(2px)}\n","",{version:3,sources:["webpack://./src/sass/_layout.scss","webpack://./src/sass/_variables.scss","webpack://./src/sass/_base.scss","webpack://./src/sass/_utils.scss","webpack://./src/sass/_header.scss","webpack://./src/sass/_sidebar.scss","webpack://./src/sass/_list.scss","webpack://./src/sass/_detail.scss","webpack://./src/sass/_login.scss"],names:[],mappings:"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",sourcesContent:["body {\n  // height: 100vh;\n  background: linear-gradient(\n    to right top,\n    rgba($color-secondary-4, 0.8),\n    rgba($color-secondary-4, 1)\n  );\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 20% 80%;\n  grid-template-rows: 4rem 1fr;\n\n  max-width: 95rem;\n  min-height: 55rem;\n\n  margin: 8rem auto;\n  background-color: rgb(255, 255, 255);\n  box-shadow: $shadow;\n\n  position: relative;\n\n  @media only screen and (max-width: $bp-large) {\n    grid-template-columns: 22% 78%;\n  }\n}\n\n.main {\n  display: grid;\n  grid-template-columns: 40% 60%;\n  grid-column-gap: 1rem;\n\n  @media only screen and (max-width: $bp-large) {\n    // grid-template-columns: 45% 55%;\n  }\n}\n\n.header {\n  grid-row: 1/2;\n  grid-column: 2/-1;\n  height: 100%;\n  width: 100%;\n}\n.sidebar {\n  grid-row: 1/-1;\n  grid-column: 1/2;\n  height: 100%;\n  width: 100%;\n}\n","//COLORS\n$color-primary: rgba(235, 77, 75, 1);\n$color-secondary-1: rgba(27, 156, 252, 1);\n$color-secondary-2: rgba(106, 176, 76, 1);\n$color-secondary-3: rgba(245, 59, 87, 1);\n$color-secondary-4: rgba(30, 39, 46, 1);\n$color-secondary-5: rgba(190, 46, 221, 1);\n$color-secondary-6: rgba(39, 174, 96, 1);\n\n// $color-grey-light-1: rgba(180, 196, 206, 0.22);\n$color-grey-light-1: rgba(180, 196, 206, 0.1);\n$color-grey-light-2: rgba(97, 116, 141, 1);\n$color-grey-dark: rgba(32, 33, 36, 1);\n\n$color-blue2: rgba(0, 151, 230, 1);\n$color-blue3: rgb(1, 102, 153);\n\n//FONTS\n$font-primary: ' Lato ', sans-serif;\n\n//OUTLINES\n$outline: 1.5px rgb(190, 190, 190) solid;\n$outline-light: 1.5px rgba(190, 190, 190, 0.3) solid;\n$outline-light-2: 1px rgba($color-secondary-6, 1) solid;\n\n$shadow: 0 2rem 6rem rgba(0, 0, 0, 0.3);\n$shadow-light: 0 0.5rem 1rem rgba(#333, 0.1);\n\n//RESPONSIVE BREAKPOINTS\n$bp-largest: 75em; // 1200px\n$bp-large: 62.5em; // 1000px\n$bp-medium: 56.25em; // 900px;\n$bp-small: 37.5em; // 600px;\n","*,\n*::before,\n*::after {\n  padding: 0;\n  margin: 0;\n  box-sizing: inherit;\n}\n\nhtml {\n  font-size: 62.5%;\n\n  @media only screen and (max-width: $bp-large) {\n    font-size: 56.25%;\n  }\n  @media only screen and (max-width: $bp-medium) {\n    font-size: 50%;\n  }\n  @media only screen and (max-width: 50em) {\n    font-size: 43.75%;\n  }\n}\n\nbody {\n  box-sizing: border-box;\n  font-family: $font-primary;\n  font-size: 1.4rem;\n  font-weight: 300;\n  line-height: 1.6;\n  color: $color-grey-dark;\n}\n",".icon {\n  display: block;\n  height: 2rem;\n  width: 2rem;\n\n  fill: $color-grey-dark;\n}\n\ninput,\ninput:active,\ninput:focus {\n  border: none;\n  outline: none;\n}\n\n.cover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: transparent;\n}\n\n.cursor {\n  cursor: pointer;\n}\n\n.blue {\n  background-color: $color-secondary-1;\n}\n\n.yellow {\n  background-color: $color-secondary-2;\n}\n.green {\n  background-color: $color-secondary-3;\n}\n\n.pink {\n  background-color: $color-secondary-4;\n}\n.red {\n  background-color: $color-primary;\n}\n.purple {\n  background-color: $color-secondary-5;\n}\n\n.show {\n  opacity: 1;\n  visibility: visible;\n}\n\n.hide {\n  opacity: 0;\n  visibility: hidden;\n}\n\n::-webkit-input-placeholder {\n  color: rgba(#333, 0.6);\n}\n\n.popup {\n  opacity: 0;\n  visibility: hidden;\n\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n\n  height: 100%;\n  width: 100%;\n\n  background-color: rgba(#333, 0.3);\n  backdrop-filter: blur(4px);\n}\n",".header {\n  display: grid;\n  grid-template-columns: 1fr 8rem 18rem;\n  justify-items: center;\n  align-items: center;\n\n  padding: 0 2rem;\n\n  background-color: $color-grey-light-1;\n  background-color: $color-primary;\n  color: #fff;\n\n  .icon {\n    fill: #fff;\n  }\n\n  &__search {\n    display: flex;\n    justify-items: center;\n    align-items: center;\n\n    width: 100%;\n\n    input {\n      width: 100%;\n      height: 4rem;\n      border: none;\n      background-color: transparent;\n      color: #fff;\n\n      &:active,\n      &:focus {\n        outline: none;\n      }\n    }\n\n    .search-icon {\n      margin-right: 1rem;\n\n      width: 1.5rem;\n      height: 1.5rem;\n    }\n  }\n\n  &__notif {\n    .notif-icon {\n      fill: rgb(212, 212, 212);\n    }\n  }\n\n  &__user {\n    display: flex;\n    justify-self: end;\n    justify-content: center;\n    align-items: center;\n\n    &--img {\n      margin-right: 1rem;\n      width: 2rem;\n      height: 2rem;\n\n      .image {\n        display: block;\n        width: 2rem;\n        height: 2rem;\n        object-fit: cover;\n        border-radius: 0.5rem;\n      }\n    }\n\n    &--name {\n      font-weight: 400;\n    }\n\n    &--menu {\n      margin-left: 1rem;\n    }\n  }\n}\n",".sidebar {\n  padding: 1rem 2rem;\n  border-right: $outline;\n\n  display: grid;\n  grid-template-rows: 10% min-content 1fr min-content;\n  grid-row-gap: 4rem;\n\n  &__logo {\n    color: transparent;\n    font-size: 4rem;\n    font-weight: 700;\n    background: linear-gradient(\n      to right bottom,\n      rgba($color-secondary-4, 1),\n      rgba($color-primary, 1)\n    );\n    background-clip: text;\n  }\n\n  &__nav {\n    display: grid;\n    grid-template-rows: repeat(5, min-content);\n    grid-row-gap: 2rem;\n\n    .icon {\n      height: 1.5rem;\n      width: 1.5rem;\n    }\n\n    & > div {\n      display: grid;\n      grid-template-columns: 10% 90%;\n      grid-column-gap: 1.5rem;\n      align-items: center;\n\n      text-transform: capitalize;\n    }\n  }\n  &__overview {\n    .icon {\n      fill: $color-secondary-1;\n      height: 2rem;\n      width: 2rem;\n    }\n  }\n  &__today {\n    .icon {\n      fill: $color-secondary-2;\n    }\n  }\n  &__important {\n    .icon {\n      fill: $color-secondary-3;\n    }\n  }\n  &__scheduled {\n    .icon {\n      fill: $color-secondary-4;\n    }\n  }\n  &__done {\n    .icon {\n      fill: $color-secondary-5;\n    }\n  }\n\n  &__tag {\n    display: flex;\n    flex-direction: column;\n\n    &--item {\n      display: grid;\n      grid-template-columns: min-content 1fr min-content;\n      justify-content: space-between;\n      align-items: center;\n\n      margin-bottom: 1rem;\n      position: relative;\n\n      cursor: pointer;\n\n      .tag {\n        &-color {\n          height: 1rem;\n          width: 1rem;\n          border-radius: 2px;\n          margin-right: 2rem;\n        }\n\n        &-count {\n          position: relative;\n          color: #fff;\n          z-index: 100;\n          font-size: 1rem;\n\n          &::after {\n            display: block;\n            content: '';\n            position: absolute;\n            top: 0;\n            right: 0;\n            transform: translate(30%, -5%);\n\n            z-index: -1;\n\n            height: 1.5rem;\n            width: 1.5rem;\n            border-radius: 100%;\n\n            background-color: rgba($color-secondary-4, 0.5);\n          }\n        }\n      }\n    }\n  }\n\n  &__add {\n    justify-self: center;\n    margin-top: -6rem;\n\n    height: 4rem;\n    width: 4rem;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    background-color: $color-primary;\n    border-radius: 100%;\n\n    box-shadow: $shadow-light;\n\n    cursor: pointer;\n\n    &-btn {\n      fill: #fff;\n    }\n  }\n}\n\n.blue {\n  background-color: $color-secondary-1;\n}\n\n.yellow {\n  background-color: $color-secondary-2;\n}\n.red {\n  background-color: $color-secondary-3;\n}\n\n.form {\n  opacity: 0;\n  visibility: hidden;\n\n  display: flex;\n  flex-direction: column;\n\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 10000;\n\n  &__input {\n    background-color: #fff;\n    color: rgba($color-secondary-4, 0.7);\n\n    padding: 1rem;\n    border-radius: 5px;\n    margin-bottom: 1rem;\n    width: 25rem;\n\n    &:hover {\n      box-shadow: $shadow-light;\n    }\n\n    // &:invalid {\n    //   outline: 0.1px solid red;\n    // }\n  }\n  &__label {\n    font-size: 1.4rem;\n    color: $color-secondary-4;\n    font-weight: 700;\n  }\n\n  &__desc {\n    padding: 1rem;\n    height: 10rem;\n    outline: none;\n    border: none;\n\n    &:active,\n    &:focus {\n      outline: none;\n      border: none;\n    }\n  }\n}\n\n.submit-btn {\n  padding: 1rem 2rem;\n  box-shadow: $shadow-light;\n  font-weight: 700;\n  margin-top: 1rem;\n\n  background: linear-gradient(to right, rgba(235, 77, 75, 1), rgb(167, 53, 51));\n  color: #fff;\n\n  cursor: pointer;\n\n  transition: all 0.5s;\n\n  &:hover {\n    background: linear-gradient(\n      to right,\n      rgba(235, 77, 75, 0.7),\n      rgba(167, 53, 51, 0.8)\n    );\n\n    &:active {\n      transform: translateY(2px);\n    }\n  }\n}\n\n.close-popup {\n  position: absolute;\n  top: -2rem;\n  right: -2rem;\n\n  font-size: 1.6rem;\n  font-weight: 700;\n\n  color: rgb(255, 0, 0);\n\n  cursor: pointer;\n}\n",".list {\n  border-right: $outline;\n  position: relative;\n\n  &__header {\n    padding: 1rem 2rem;\n    border-bottom: 2px solid $color-secondary-1;\n\n    display: flex;\n    justify-content: space-between;\n  }\n  &__content {\n    display: flex;\n    flex-direction: column;\n\n    height: 90%;\n  }\n  &__item {\n    padding: 1.5rem 2rem;\n    border-bottom: $outline-light;\n\n    display: grid;\n    grid-template-columns: 2rem 1fr 1rem 1rem;\n    align-items: center;\n\n    position: relative;\n\n    // background-color: $color-grey-light-1;\n\n    &:hover {\n      box-shadow: $shadow-light;\n      cursor: pointer;\n    }\n\n    .icon {\n      height: 1rem;\n      width: 1rem;\n    }\n\n    .star-icon {\n      //   fill: $color-primary;\n      position: relative;\n      z-index: 10000;\n    }\n\n    .delete {\n      position: relative;\n      z-index: 10000;\n      margin-left: 1rem;\n\n      color: $color-grey-dark;\n    }\n\n    &--description {\n      display: flex;\n      flex-direction: column;\n      margin-left: 2rem;\n\n      .bottom {\n        display: flex;\n        align-items: center;\n\n        text-transform: capitalize;\n        font-size: 0.9rem;\n\n        & > .icon {\n          margin-right: 0.5rem;\n        }\n\n        & > span {\n          margin-right: 2rem;\n        }\n\n        .time-icon {\n          fill: $color-secondary-3;\n\n          position: relative;\n          z-index: 10000;\n        }\n\n        .notif-icon {\n          fill: $color-secondary-1;\n\n          position: relative;\n          z-index: 10000;\n        }\n      }\n    }\n\n    .done__icon-div {\n      height: 2rem;\n      width: 2rem;\n\n      border-radius: 100%;\n      border: $outline-light;\n\n      display: flex;\n      justify-content: center;\n      align-items: center;\n\n      position: relative;\n      z-index: 10000;\n\n      .icon {\n        fill: $color-secondary-6;\n        // opacity: 0;\n        // visibility: hidden;\n\n        transition: all 0.5s;\n      }\n    }\n  }\n}\n\n#red {\n  fill: $color-primary;\n}\n\n#black {\n  fill: $color-grey-dark;\n}\n\n.page {\n  position: absolute;\n  bottom: 1rem;\n  right: 3rem;\n  display: grid;\n  grid-template-columns: repeat(2, min-content);\n  grid-column-gap: 2rem;\n\n  & > a {\n    display: none;\n    cursor: pointer;\n\n    color: $color-primary;\n\n    &:hover {\n      color: #000;\n    }\n  }\n}\n",".detail {\n  display: grid;\n  grid-template-columns: 4rem 1fr;\n  grid-column-gap: 1rem;\n\n  padding: 1rem;\n  padding-top: 3rem;\n  padding-right: 3rem;\n\n  &__icon {\n    height: 3rem;\n    width: 3rem;\n\n    border-radius: 100%;\n    // border: $outline-light;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    // background-color: $color-secondary-6;\n\n    .icon {\n      fill: #fff;\n      // opacity: 1;\n      // visibility: hidden;\n\n      transition: all 0.5s;\n    }\n  }\n  &__content {\n  }\n  &__header {\n    display: grid;\n    grid-template-rows: repeat(2, 50%);\n    grid-row-gap: 0.5rem;\n\n    .top {\n      display: flex;\n      justify-content: space-between;\n      align-items: flex-start;\n      align-items: center;\n\n      font-size: 1.4rem;\n      font-weight: 700;\n\n      .icon-div {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        grid-column-gap: 1rem;\n\n        .icon {\n          height: 1.5rem;\n          width: 1.5rem;\n        }\n      }\n    }\n\n    .bottom {\n      display: grid;\n      grid-template-columns: 10rem 20rem;\n      font-size: 1rem;\n      color: $color-primary;\n\n      & > div {\n        display: flex;\n        align-items: center;\n\n        .icon {\n          margin-right: 0.5rem;\n          height: 1.2rem;\n          width: 1.2rem;\n          fill: $color-primary;\n        }\n      }\n\n      .date {\n        margin-right: -10rem;\n      }\n    }\n  }\n  &__text {\n    padding-top: 2rem;\n    padding-right: 2rem;\n    font-size: 1.2rem;\n  }\n\n  &__step {\n    padding-top: 2rem;\n\n    &--add {\n      display: block;\n      margin-bottom: 1rem;\n\n      color: $color-secondary-1;\n\n      cursor: pointer;\n    }\n\n    &--item {\n      margin-bottom: 0.5rem;\n      display: grid;\n      grid-template-columns: repeat(2, max-content);\n      grid-column-gap: 1rem;\n      align-items: center;\n    }\n  }\n}\n",".login {\n  &__form {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 10000;\n    padding: 10rem;\n\n    background-color: #fff;\n    color: rgba($color-secondary-4, 0.7);\n  }\n\n  &__img {\n    margin-bottom: 2rem;\n  }\n  &__text {\n    margin-bottom: 2rem;\n  }\n  &__btn {\n    border: none;\n    outline: none;\n\n    padding: 1rem 2rem;\n    box-shadow: $shadow-light;\n    font-weight: 700;\n\n    background-color: $color-blue2;\n    color: #fff;\n\n    cursor: pointer;\n\n    transition: all 0.5s;\n\n    &:hover {\n      background-color: $color-blue3;\n\n      &:active {\n        transform: translateY(2px);\n      }\n    }\n  }\n}\n"],sourceRoot:""}]);const s=o},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{"use strict";function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,a=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(t.push(o.value),!n||t.length!==n);r=!0);}catch(e){a=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw i}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),d=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(d).concat([l]).join("\n")}return[i].join("\n")}},379:(e,n,t)=>{"use strict";var r,a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function o(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},r=[],a=0;a<e.length;a++){var s=e[a],c=n.base?s[0]+n.base:s[0],l=t[c]||0,d="".concat(c," ").concat(l);t[c]=l+1;var u=o(d),A={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(i[u].references++,i[u].updater(A)):i.push({identifier:d,updater:C(A,n),references:1}),r.push(d)}return r}function c(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var l,d=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function u(e,n,t,r){var a=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(n,a);else{var i=document.createTextNode(a),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function A(e,n,t){var r=t.css,a=t.media,i=t.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,g=0;function C(e,n){var t,r,a;if(n.singleton){var i=g++;t=m||(m=c(n)),r=u.bind(null,t,i,!1),a=u.bind(null,t,i,!0)}else t=c(n),r=A.bind(null,t,n),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else a()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var a=o(t[r]);i[a].references--}for(var c=s(e,n),l=0;l<t.length;l++){var d=o(t[l]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}t=c}}}},877:(e,n,t)=>{var r=t(570),a=t(171),i=a;i.v1=r,i.v4=a,e.exports=i},327:e=>{for(var n=[],t=0;t<256;++t)n[t]=(t+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,a=n;return[a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]]].join("")}},217:e=>{var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var t=new Uint8Array(16);e.exports=function(){return n(t),t}}else{var r=new Array(16);e.exports=function(){for(var e,n=0;n<16;n++)0==(3&n)&&(e=4294967296*Math.random()),r[n]=e>>>((3&n)<<3)&255;return r}}},570:(e,n,t)=>{var r,a,i=t(217),o=t(327),s=0,c=0;e.exports=function(e,n,t){var l=n&&t||0,d=n||[],u=(e=e||{}).node||r,A=void 0!==e.clockseq?e.clockseq:a;if(null==u||null==A){var m=i();null==u&&(u=r=[1|m[0],m[1],m[2],m[3],m[4],m[5]]),null==A&&(A=a=16383&(m[6]<<8|m[7]))}var g=void 0!==e.msecs?e.msecs:(new Date).getTime(),C=void 0!==e.nsecs?e.nsecs:c+1,f=g-s+(C-c)/1e4;if(f<0&&void 0===e.clockseq&&(A=A+1&16383),(f<0||g>s)&&void 0===e.nsecs&&(C=0),C>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=g,c=C,a=A;var p=(1e4*(268435455&(g+=122192928e5))+C)%4294967296;d[l++]=p>>>24&255,d[l++]=p>>>16&255,d[l++]=p>>>8&255,d[l++]=255&p;var h=g/4294967296*1e4&268435455;d[l++]=h>>>8&255,d[l++]=255&h,d[l++]=h>>>24&15|16,d[l++]=h>>>16&255,d[l++]=A>>>8|128,d[l++]=255&A;for(var b=0;b<6;++b)d[l+b]=u[b];return n||o(d)}},171:(e,n,t)=>{var r=t(217),a=t(327);e.exports=function(e,n,t){var i=n&&t||0;"string"==typeof e&&(n="binary"===e?new Array(16):null,e=null);var o=(e=e||{}).random||(e.rng||r)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,n)for(var s=0;s<16;++s)n[i+s]=o[s];return n||a(o)}}},n={};function t(r){if(n[r])return n[r].exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{"use strict";var e=t(379),n=t.n(e),r=t(842);function a(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function i(e){a(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(e){a(1,arguments);var n=i(e);return!isNaN(n)}n()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var s={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function c(e){return function(n){var t=n||{},r=t.width?String(t.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var l,d={date:c({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:c({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:c({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function A(e){return function(n,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var s=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(n):n]}}function m(e){return function(n,t){var r=String(n),a=t||{},i=a.width,o=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],s=r.match(o);if(!s)return null;var c,l=s[0],d=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth];return c="[object Array]"===Object.prototype.toString.call(d)?function(e,n){for(var t=0;t<e.length;t++)if(e[t].test(l))return t}(d):function(e,n){for(var t in e)if(e.hasOwnProperty(t)&&e[t].test(l))return t}(d),c=e.valueCallback?e.valueCallback(c):c,{value:c=a.valueCallback?a.valueCallback(c):c,rest:r.slice(l.length)}}}const g={code:"en-US",formatDistance:function(e,n,t){var r;return t=t||{},r="string"==typeof s[e]?s[e]:1===n?s[e].one:s[e].other.replace("{{count}}",n),t.addSuffix?t.comparison>0?"in "+r:r+" ago":r},formatLong:d,formatRelative:function(e,n,t,r){return u[e]},localize:{ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:A({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:A({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:A({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:A({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:A({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(l={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,n){var t=String(e),r=n||{},a=t.match(l.matchPattern);if(!a)return null;var i=a[0],o=t.match(l.parsePattern);if(!o)return null;var s=l.valueCallback?l.valueCallback(o[0]):o[0];return{value:s=r.valueCallback?r.valueCallback(s):s,rest:t.slice(i.length)}}),era:m({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:m({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:m({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:m({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:m({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function C(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function f(e,n){a(2,arguments);var t=i(e).getTime(),r=C(n);return new Date(t+r)}function p(e,n){a(2,arguments);var t=C(n);return f(e,-t)}function h(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const b=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return h("yy"===n?r%100:r,n.length)},B=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):h(t+1,2)},y=function(e,n){return h(e.getUTCDate(),n.length)},v=function(e,n){return h(e.getUTCHours()%12||12,n.length)},w=function(e,n){return h(e.getUTCHours(),n.length)},k=function(e,n){return h(e.getUTCMinutes(),n.length)},x=function(e,n){return h(e.getUTCSeconds(),n.length)},_=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return h(Math.floor(r*Math.pow(10,t-3)),n.length)};var T=864e5;function E(e){a(1,arguments);var n=1,t=i(e),r=t.getUTCDay(),o=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function D(e){a(1,arguments);var n=i(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=E(r),s=new Date(0);s.setUTCFullYear(t,0,4),s.setUTCHours(0,0,0,0);var c=E(s);return n.getTime()>=o.getTime()?t+1:n.getTime()>=c.getTime()?t:t-1}function S(e){a(1,arguments);var n=D(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=E(t);return r}var M=6048e5;function Y(e,n){a(1,arguments);var t=n||{},r=t.locale,o=r&&r.options&&r.options.weekStartsOn,s=null==o?0:C(o),c=null==t.weekStartsOn?s:C(t.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=i(e),d=l.getUTCDay(),u=(d<c?7:0)+d-c;return l.setUTCDate(l.getUTCDate()-u),l.setUTCHours(0,0,0,0),l}function U(e,n){a(1,arguments);var t=i(e,n),r=t.getUTCFullYear(),o=n||{},s=o.locale,c=s&&s.options&&s.options.firstWeekContainsDate,l=null==c?1:C(c),d=null==o.firstWeekContainsDate?l:C(o.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(r+1,0,d),u.setUTCHours(0,0,0,0);var A=Y(u,n),m=new Date(0);m.setUTCFullYear(r,0,d),m.setUTCHours(0,0,0,0);var g=Y(m,n);return t.getTime()>=A.getTime()?r+1:t.getTime()>=g.getTime()?r:r-1}function j(e,n){a(1,arguments);var t=n||{},r=t.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:C(i),s=null==t.firstWeekContainsDate?o:C(t.firstWeekContainsDate),c=U(e,n),l=new Date(0);l.setUTCFullYear(c,0,s),l.setUTCHours(0,0,0,0);var d=Y(l,n);return d}var L=6048e5;function O(e,n){var t=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return t+String(a);var o=n||"";return t+String(a)+o+h(i,2)}function W(e,n){return e%60==0?(e>0?"-":"+")+h(Math.abs(e)/60,2):I(e,n)}function I(e,n){var t=n||"",r=e>0?"-":"+",a=Math.abs(e);return r+h(Math.floor(a/60),2)+t+h(a%60,2)}const P={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});case"GGGG":default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return b(e,n)},Y:function(e,n,t,r){var a=U(e,r),i=a>0?a:1-a;return"YY"===n?h(i%100,2):"Yo"===n?t.ordinalNumber(i,{unit:"year"}):h(i,n.length)},R:function(e,n){return h(D(e),n.length)},u:function(e,n){return h(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return h(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return h(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return B(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return h(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var o=function(e,n){a(1,arguments);var t=i(e),r=Y(t,n).getTime()-j(t,n).getTime();return Math.round(r/L)+1}(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):h(o,n.length)},I:function(e,n,t){var r=function(e){a(1,arguments);var n=i(e),t=E(n).getTime()-S(n).getTime();return Math.round(t/M)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):h(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):y(e,n)},D:function(e,n,t){var r=function(e){a(1,arguments);var n=i(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),o=t-r;return Math.floor(o/T)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):h(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});case"EEEE":default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(i);case"ee":return h(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});case"eeee":default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(i);case"cc":return h(i,n.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});case"cccc":default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),a=0===r?7:r;switch(n){case"i":return String(a);case"ii":return h(a,n.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});case"iiii":default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",n){case"b":case"bb":case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return v(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):w(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):h(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):h(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):k(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):x(e,n)},S:function(e,n){return _(e,n)},X:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(n){case"X":return W(a);case"XXXX":case"XX":return I(a);case"XXXXX":case"XXX":default:return I(a,":")}},x:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return W(a);case"xxxx":case"xx":return I(a);case"xxxxx":case"xxx":default:return I(a,":")}},O:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+O(a,":");case"OOOO":default:return"GMT"+I(a,":")}},z:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+O(a,":");case"zzzz":default:return"GMT"+I(a,":")}},t:function(e,n,t,r){var a=r._originalDate||e;return h(Math.floor(a.getTime()/1e3),n.length)},T:function(e,n,t,r){return h((r._originalDate||e).getTime(),n.length)}};function q(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});case"PPPP":default:return n.date({width:"full"})}}function N(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});case"pppp":default:return n.time({width:"full"})}}const z={p:N,P:function(e,n){var t,r=e.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return q(e,n);switch(a){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;case"PPPP":default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",q(a,n)).replace("{{time}}",N(i,n))}};var $=6e4;function G(e){return e.getTime()%$}function H(e){var n=new Date(e.getTime()),t=Math.ceil(n.getTimezoneOffset());n.setSeconds(0,0);var r=t>0?($+G(n))%$:G(n);return t*$+r}var K=["D","DD"],R=["YY","YYYY"];function X(e){return-1!==K.indexOf(e)}function F(e){return-1!==R.indexOf(e)}function J(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var Q=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Z=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,V=/^'([^]*?)'?$/,ee=/''/g,ne=/[a-zA-Z]/;function te(e){return e.match(V)[1].replace(ee,"'")}var re=t(877),ae='\n            <div class="list__item" data-id="%%ID%%" data-tag="%%TAG%%">\n              <div class="cover">&nbsp;</div>\n              <div class="done__icon-div">\n                <svg class="icon %%SHOW%%">\n                  <use xlink:href="./img/sprite.svg#icon-checkmark"></use>\n                </svg>\n              </div>\n              <div class="list__item--description">\n                <span class="top">%%TITLE%%</span>\n                <div class="bottom">\n                  <svg class="icon time-icon">\n                    <use xlink:href="./img/sprite.svg#icon-access_time"></use>\n                  </svg>\n                  <span class="due-date">%%DUEDATE%%</span>\n                  \x3c!--\n                  <svg class="icon notif-icon">\n                    <use\n                      xlink:href="./img/sprite.svg#icon-notifications-outline"\n                    ></use>\n                  </svg>\n                  --\x3e\n                </div>\n              </div>\n              <svg id="%%STARICON%%" class="icon star-icon">\n              <use xlink:href="./img/sprite.svg#icon-star-o"></use>\n              </svg>\n              <span class="delete">x</span>\n            </div>';function ie(e){return(ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var oe={addTaskBtn:document.querySelector(".sidebar__add"),form:document.querySelector(".form"),popup:document.querySelector(".add-popup"),popupCloseBtn:document.querySelector(".close-popup"),taskTitle:document.querySelector("#title"),taskDescription:document.querySelector("#description"),taskDueDate:document.querySelector("#deadline"),taskTag:document.querySelector("#tag"),taskSubmitBtn:document.querySelector(".submit-btn"),taskList:document.querySelector(".list__content"),detailSection:document.querySelector(".detail"),tagList:document.querySelector(".sidebar__tag"),taskListHeaderText:document.querySelector(".list__header--text"),sidebarOverview:document.querySelector(".sidebar__overview"),sidebarDone:document.querySelector(".sidebar__done"),sidebarImportant:document.querySelector(".sidebar__important"),sidebarToday:document.querySelector(".sidebar__today"),searchInput:document.querySelector(".search__input"),pageNext:document.querySelector(".page__next"),pagePrev:document.querySelector(".page__prev"),deleteBtn:document.querySelector(".delete")},se=function(){oe.form.style.opacity=1,oe.form.style.visibility="visible",oe.popup.style.opacity=1,oe.popup.style.visibility="visible"},ce=function(){oe.form.style.opacity=0,oe.form.style.visibility="hidden",oe.popup.style.opacity=0,oe.popup.style.visibility="hidden"},le=function(e,n){return e.taskDueDate<n.taskDueDate?-1:e.taskDueDate>n.taskDueDate?1:0},de=function(e,n){e.forEach((function(e,t,r){e.id===n&&r.splice(t,1)}))};function ue(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}!function(e,n){var t,r=e.DOM,a=(r.addTaskBtn,r.form),i=r.taskList,o=r.tagList,s=r.sidebarOverview,c=r.sidebarDone,l=r.sidebarImportant,d=r.sidebarToday,u=r.searchInput,A=r.pageNext,m=r.pagePrev,g=(r.deleteBtn,{tasks:[],tags:{},completed:[],important:[]}),C=function(){localStorage.setItem("state",JSON.stringify(g))},f=1;window.addEventListener("load",(function(r){JSON.parse(localStorage.getItem("state"))?g=JSON.parse(localStorage.getItem("state")):C(),n.sortTasksByDate(g.tasks),f=1,t=g.tasks,e.showPageNumbers(g.tasks,f),n.pageCtrl(g.tasks,e.renderTask,f),g.tags&&e.renderTags(g)}));var p=function e(n){var t=n.taskTitle,r=n.taskDescription,a=n.taskDueDate,i=n.taskTag,o=n.id,s=n.formattedDueDate;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.taskTitle=t,this.taskDescription=r,this.taskDueDate=a,this.taskTag=i,this.id=o,this.formattedDueDate=s,this.important=""};e.popupEvents(),a.addEventListener("submit",(function(r){r.preventDefault();var a=e.getUserInput(p,g);n.sortTasksByDate(g.tasks),f=1,t=g.tasks,e.showPageNumbers(g.tasks,f),n.pageCtrl(g.tasks,e.renderTask,f),e.getTags(g,a,a.taskTag),e.renderTags(g),C()})),i.addEventListener("click",(function(r){var a=r.target.className,i=r.target.classList;if("cover"===a){var o=r.target.parentNode.getAttribute("data-id");e.renderTaskDetails(g,o)}if("done__icon-div"===a){var s=r.target.parentNode.getAttribute("data-id"),c=r.target.parentNode.getAttribute("data-tag");n.removeCompleted(g,s,c),n.sortTasksByDate(g.tasks),e.showPageNumbers(t,f=1),n.pageCtrl(t,e.renderTask,f),e.changeHeader("",t,g),e.renderTags(g),C(),changeHeader}if("star-icon"===i[1]){var l=r.target.parentNode.getAttribute("data-id");n.toggleImportant(g,l),n.sortTasksByDate(g.tasks),e.showPageNumbers(t,f=1),n.pageCtrl(t,e.renderTask,f),e.changeHeader("",t,g),C()}if("delete"===a){var d=r.target.parentNode.getAttribute("data-id"),u=r.target.parentNode.getAttribute("data-tag");n.deleteTask(g,d,u),n.sortTasksByDate(g.tasks),e.showPageNumbers(t,f=1),n.pageCtrl(t,e.renderTask,f),e.changeHeader("",t,g),e.renderTags(g),C()}})),o.addEventListener("click",(function(t){var r,a,i=(r=t.target.classList,a=2,function(e){if(Array.isArray(e))return e}(r)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(t.push(o.value),!n||t.length!==n);r=!0);}catch(e){a=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw i}}return t}}(r,a)||function(e,n){if(e){if("string"==typeof e)return ue(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?ue(e,n):void 0}}(r,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[0];"cover"===i[1]&&e.renderTaskByTags(g.tags,o,n.sortTasksByDate)})),s.addEventListener("click",(function(r){n.sortTasksByDate(g.tasks),f=1,t=g.tasks,e.showPageNumbers(g.tasks,f),n.pageCtrl(g.tasks,e.renderTask,f),C()})),c.addEventListener("click",(function(r){n.sortTasksByDate(g.completed),f=1,t=g.completed,e.showPageNumbers(g.completed,f),n.pageCtrl(g.completed,e.renderTask,f,"show"),e.changeHeader("Completed")})),l.addEventListener("click",(function(r){n.sortTasksByDate(g.important),f=1,t=g.important,e.showPageNumbers(g.important,f),n.pageCtrl(g.important,e.renderTask,f),e.changeHeader("Important")})),d.addEventListener("click",(function(n){e.renderToday(g)})),u.addEventListener("input",(function(t){var r=t.target.value;n.searchTask(g,r,e.renderTask)})),A.addEventListener("click",(function(r){f+=1;var a="";t===g.completed&&(a="show"),e.showPageNumbers(t,f),n.pageCtrl(t,e.renderTask,f,a)})),m.addEventListener("click",(function(r){f-=1;var a="";t===g.completed&&(a="show"),e.showPageNumbers(t,f),n.pageCtrl(t,e.renderTask,f,a)}))}({DOM:oe,popupOpen:se,popupClose:ce,popupEvents:function(){oe.addTaskBtn.addEventListener("click",(function(e){se()})),oe.popupCloseBtn.addEventListener("click",(function(e){ce()}))},getUserInput:function(e,n){var t=oe.taskTitle.value,r=oe.taskDescription.value,s=new Date(oe.taskDueDate.value),c=oe.taskTag.value.toLowerCase(),l=(0,re.v4)(),d=function(e,n,t){a(2,arguments);var r=String(n),s=t||{},c=s.locale||g,l=c.options&&c.options.firstWeekContainsDate,d=null==l?1:C(l),u=null==s.firstWeekContainsDate?d:C(s.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=c.options&&c.options.weekStartsOn,m=null==A?0:C(A),f=null==s.weekStartsOn?m:C(s.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");var h=i(e);if(!o(h))throw new RangeError("Invalid time value");var b=H(h),B=p(h,b),y={firstWeekContainsDate:u,weekStartsOn:f,locale:c,_originalDate:h};return r.match(Z).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,z[n])(e,c.formatLong,y):e})).join("").match(Q).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return te(t);var a=P[r];if(a)return!s.useAdditionalWeekYearTokens&&F(t)&&J(t,n,e),!s.useAdditionalDayOfYearTokens&&X(t)&&J(t,n,e),a(B,t,c.localize,y);if(r.match(ne))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("")}(s,"EEE, do MMM `yy");if(t&&d){var u=new e({taskTitle:t,taskDescription:r,taskDueDate:s,taskTag:c||"Primary",id:l,formattedDueDate:d});return n.tasks.push(u),oe.taskTitle.value="",oe.taskDescription.value="",oe.taskDueDate.value="",oe.taskTag.value="",ce(oe.form,oe.addPopup),u}},renderTask:function(e,n){var t;e&&(oe.taskList.innerHTML="",oe.taskListHeaderText.textContent="All",e.forEach((function(e){t=ae,t=n?t.replace("%%SHOW%%","show"):t.replace("%%SHOW%%","hide"),t=(t=(t=(t=(t="yes"===e.important?t.replace("%%STARICON%%","red"):t.replace("%%STARICON%%","black")).replace("%%TITLE%%",e.taskTitle)).replace("%%DUEDATE%%",e.formattedDueDate)).replace("%%ID%%",e.id)).replace("%%TAG%%",e.taskTag),oe.taskList.insertAdjacentHTML("beforeend",t)})))},renderTaskDetails:function(e,n){var t='  \n            <div class="detail__icon">\n            <svg class="icon done-icon">\n              <use xlink:href="./img/sprite.svg#icon-"></use>\n            </svg>\n          </div>\n      \n          <div class="detail__content">\n            <div class="detail__header">\n              <div class="top">\n                <span>%%DETAILTITLE%%</span>\n                <div class="icon-div">\n                  <svg class="icon">\n                    <use\n                      xlink:href="./img/sprite.svg#icon-dots-horizontal-triple"\n                    ></use>\n                  </svg>\n                  \x3c!--\n                  <svg class="icon">\n                    <use\n                      xlink:href="./img/sprite.svg#icon-dots-horizontal-triple"\n                    ></use>\n                  </svg>\n                  --\x3e\n                </div>\n              </div>\n              <div class="bottom">\n                <div class="date">\n                  <svg class="icon">\n                    <use xlink:href="./img/sprite.svg#icon-access_time"></use>\n                  </svg>\n                  <span>%%DETAILDUEDATE%%</span>\n                </div>\n                \x3c!--\n                <div class="reminder">\n                  <svg class="icon">\n                    <use xlink:href="./img/sprite.svg#icon-alarmclock"></use>\n                  </svg>\n                  <span>Remind me at 9:15am</span>\n                </div>\n                --\x3e\n              </div>\n            </div>\n            <p class="detail__text">\n              %%DETAILDESCRIPTION%%\n            </p>\n            \n            \x3c!--\n            <div class="detail__step">\n              <a class="detail__step--add"> &#43; Add step </a>\n              <div class="detail__step--item">\n                <input type="checkbox" name="" id="step item" />\n                <label for="step item">play soccer</label>\n              </div>\n\n              <div class="detail__step--item">\n                <input type="checkbox" name="" id="step item" />\n                <label for="step item">music lesson</label>\n              </div>\n              <div class="detail__step--item">\n                <input type="checkbox" name="" id="step item" />\n                <label for="step item">visit the dentist</label>\n              </div>\n            </div>\n            --\x3e\n          </div>';oe.detailSection.innerHTML="",e.tasks.forEach((function(e){e.id===n&&(t=(t=(t=t.replace("%%DETAILTITLE%%",e.taskTitle)).replace("%%DETAILDUEDATE%%",e.formattedDueDate)).replace("%%DETAILDESCRIPTION%%",e.taskDescription),oe.detailSection.insertAdjacentHTML("beforeend",t))}))},getTags:function(e,n,t){if(e.tags[t])e.tags[t].push(n);else{var r=(0,re.v4)();e.tags[t]=[],e.tags[t].push(r),e.tags[t].push(n)}},renderTags:function(e){var n,t=["blue","yellow","green","pink","red","purple"];for(var r in oe.tagList.innerHTML="",e.tags)n=(n=(n=(n=(n='\n          <div class="sidebar__tag--item sidebar__tag--work">\n            <div class="%%ID%% cover">&nbsp;</div>\n            <span class="tag-color %%TAGCOLOUR%%">&nbsp;</span>\n            <span class="tag-text">%%TAGTITLE%%</span>\n            <span class="tag-count">%%TAGNUMBER%%</span>\n          </div>\n          ').replace("%%TAGTITLE%%","".concat(r[0].toUpperCase()).concat(r.slice(1)))).replace("%%ID%%",e.tags[r][0])).replace("%%TAGNUMBER%%",e.tags[r].length-1)).replace("%%TAGCOLOUR%%",t[Math.floor(6*Math.random())]),oe.tagList.insertAdjacentHTML("beforeend",n)},renderTaskByTags:function(e,n,t){var r;for(var a in oe.taskList.innerHTML="",e)n===e[a][0]&&(oe.taskListHeaderText.textContent="".concat(a[0].toUpperCase()+a.slice(1)),t(e[a]),e[a].forEach((function(e){"object"===ie(e)&&(r=(r=(r=(r=(r=(r=ae).replace("%%SHOW%%","hide")).replace("%%TITLE%%",e.taskTitle)).replace("%%DUEDATE%%",e.formattedDueDate)).replace("%%ID%%",e.id)).replace("%%TAG%%",e.taskTag),oe.taskList.insertAdjacentHTML("beforeend",r))})))},changeHeader:function(e,n,t){n&&n&&(n===t.tasks?e="All":n===t.important?e="Important":n===t.completed&&(e="Completed")),oe.taskListHeaderText.textContent=e},renderToday:function(e){var n,t=(new Date).toDateString();oe.taskList.innerHTML="",oe.taskListHeaderText.textContent="Today",e.tasks.forEach((function(e){new Date(e.taskDueDate).toDateString()===t&&(n=ae,n=(n=(n=(n=(n=(n="yes"===e.important?n.replace("%%STARICON%%","red"):n.replace("%%STARICON%%","black")).replace("%%SHOW%%","hide")).replace("%%TITLE%%",e.taskTitle)).replace("%%DUEDATE%%",e.formattedDueDate)).replace("%%ID%%",e.id)).replace("%%TAG%%",e.taskTag),oe.taskList.insertAdjacentHTML("beforeend",n))}))},showPageNumbers:function(e,n){var t=Math.ceil(e.length/6);1===n&&t>1?(oe.pageNext.style.display="block",oe.pagePrev.style.display="none"):n<t?(oe.pagePrev.style.display="block",oe.pageNext.style.display="block"):t===n&&t>1?(oe.pagePrev.style.display="block",oe.pageNext.style.display="none"):(oe.pagePrev.style.display="none",oe.pageNext.style.display="none")}},{sortTasksByDate:function(e){e.sort(le)},removeCompleted:function(e,n,t){e.tasks.forEach((function(t,r){t.id===n&&(e.completed.push(t),e.tasks.splice(r,1),e.important.splice(r,1),document.querySelector(".detail").innerHTML="")})),e.tags[t].forEach((function(r,a){r.id===n&&e.tags[t].splice(a,1)}))},toggleImportant:function(e,n){e.tasks.forEach((function(t){t.id===n&&(e.important.indexOf(t)<0&&e.completed.indexOf(t)<0?(t.important="yes",e.important.push(t)):(t.important="",e.important.forEach((function(t,r){t.id===n&&e.important.splice(r,1)}))))}))},searchTask:function(e,n,t){t(e.tasks.filter((function(e){return e.taskTitle.includes(n)})))},pageCtrl:function(e,n,t,r){var a=6*(t-1),i=6*t;n(e.slice(a,i),r)},deleteTask:function(e,n,t){de(e.tasks,n),de(e.important,n),de(e.completed,n),document.querySelector(".detail").innerHTML="",e.tags[t].forEach((function(r,a){r.id===n&&e.tags[t].splice(a,1)}))}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,