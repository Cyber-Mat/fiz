(()=>{var e={877:(e,t,n)=>{var a=n(570),r=n(171),i=r;i.v1=a,i.v4=r,e.exports=i},327:e=>{for(var t=[],n=0;n<256;++n)t[n]=(n+256).toString(16).substr(1);e.exports=function(e,n){var a=n||0,r=t;return[r[e[a++]],r[e[a++]],r[e[a++]],r[e[a++]],"-",r[e[a++]],r[e[a++]],"-",r[e[a++]],r[e[a++]],"-",r[e[a++]],r[e[a++]],"-",r[e[a++]],r[e[a++]],r[e[a++]],r[e[a++]],r[e[a++]],r[e[a++]]].join("")}},217:e=>{var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var n=new Uint8Array(16);e.exports=function(){return t(n),n}}else{var a=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),a[t]=e>>>((3&t)<<3)&255;return a}}},570:(e,t,n)=>{var a,r,i=n(217),o=n(327),s=0,u=0;e.exports=function(e,t,n){var c=t&&n||0,d=t||[],l=(e=e||{}).node||a,f=void 0!==e.clockseq?e.clockseq:r;if(null==l||null==f){var m=i();null==l&&(l=a=[1|m[0],m[1],m[2],m[3],m[4],m[5]]),null==f&&(f=r=16383&(m[6]<<8|m[7]))}var g=void 0!==e.msecs?e.msecs:(new Date).getTime(),h=void 0!==e.nsecs?e.nsecs:u+1,p=g-s+(h-u)/1e4;if(p<0&&void 0===e.clockseq&&(f=f+1&16383),(p<0||g>s)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=g,u=h,r=f;var v=(1e4*(268435455&(g+=122192928e5))+h)%4294967296;d[c++]=v>>>24&255,d[c++]=v>>>16&255,d[c++]=v>>>8&255,d[c++]=255&v;var y=g/4294967296*1e4&268435455;d[c++]=y>>>8&255,d[c++]=255&y,d[c++]=y>>>24&15|16,d[c++]=y>>>16&255,d[c++]=f>>>8|128,d[c++]=255&f;for(var w=0;w<6;++w)d[c+w]=l[w];return t||o(d)}},171:(e,t,n)=>{var a=n(217),r=n(327);e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var o=(e=e||{}).random||(e.rng||a)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t)for(var s=0;s<16;++s)t[i+s]=o[s];return t||r(o)}}},t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{}};return e[a](r,r.exports,n),r.exports}(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function a(n){e(1,arguments);var a=t(n);return!isNaN(a)}var r={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function i(e){return function(t){var n=t||{},a=n.width?String(n.width):e.defaultWidth;return e.formats[a]||e.formats[e.defaultWidth]}}var o,s={date:i({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:i({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:i({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function c(e){return function(t,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=r.width?String(r.width):i;a=e.formattingValues[o]||e.formattingValues[i]}else{var s=e.defaultWidth,u=r.width?String(r.width):e.defaultWidth;a=e.values[u]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function d(e){return function(t,n){var a=String(t),r=n||{},i=r.width,o=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],s=a.match(o);if(!s)return null;var u,c=s[0],d=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth];return u="[object Array]"===Object.prototype.toString.call(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(c))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(c))return n}(d),u=e.valueCallback?e.valueCallback(u):u,{value:u=r.valueCallback?r.valueCallback(u):u,rest:a.slice(c.length)}}}const l={code:"en-US",formatDistance:function(e,t,n){var a;return n=n||{},a="string"==typeof r[e]?r[e]:1===t?r[e].one:r[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:s,formatRelative:function(e,t,n,a){return u[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:c({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:c({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:c({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:c({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:c({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(o={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),a=t||{},r=n.match(o.matchPattern);if(!r)return null;var i=r[0],s=n.match(o.parsePattern);if(!s)return null;var u=o.valueCallback?o.valueCallback(s[0]):s[0];return{value:u=a.valueCallback?a.valueCallback(u):u,rest:n.slice(i.length)}}),era:d({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:d({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:d({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:d({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:d({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function f(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function m(n,a){e(2,arguments);var r=t(n).getTime(),i=f(a);return new Date(r+i)}function g(t,n){e(2,arguments);var a=f(n);return m(t,-a)}function h(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const p=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return h("yy"===t?a%100:a,t.length)},v=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):h(n+1,2)},y=function(e,t){return h(e.getUTCDate(),t.length)},w=function(e,t){return h(e.getUTCHours()%12||12,t.length)},b=function(e,t){return h(e.getUTCHours(),t.length)},T=function(e,t){return h(e.getUTCMinutes(),t.length)},k=function(e,t){return h(e.getUTCSeconds(),t.length)},D=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return h(Math.floor(a*Math.pow(10,n-3)),t.length)};var C=864e5;function x(n){e(1,arguments);var a=1,r=t(n),i=r.getUTCDay(),o=(i<a?7:0)+i-a;return r.setUTCDate(r.getUTCDate()-o),r.setUTCHours(0,0,0,0),r}function S(n){e(1,arguments);var a=t(n),r=a.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(r+1,0,4),i.setUTCHours(0,0,0,0);var o=x(i),s=new Date(0);s.setUTCFullYear(r,0,4),s.setUTCHours(0,0,0,0);var u=x(s);return a.getTime()>=o.getTime()?r+1:a.getTime()>=u.getTime()?r:r-1}function M(t){e(1,arguments);var n=S(t),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var r=x(a);return r}var E=6048e5;function P(n,a){e(1,arguments);var r=a||{},i=r.locale,o=i&&i.options&&i.options.weekStartsOn,s=null==o?0:f(o),u=null==r.weekStartsOn?s:f(r.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=t(n),d=c.getUTCDay(),l=(d<u?7:0)+d-u;return c.setUTCDate(c.getUTCDate()-l),c.setUTCHours(0,0,0,0),c}function L(n,a){e(1,arguments);var r=t(n,a),i=r.getUTCFullYear(),o=a||{},s=o.locale,u=s&&s.options&&s.options.firstWeekContainsDate,c=null==u?1:f(u),d=null==o.firstWeekContainsDate?c:f(o.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(i+1,0,d),l.setUTCHours(0,0,0,0);var m=P(l,a),g=new Date(0);g.setUTCFullYear(i,0,d),g.setUTCHours(0,0,0,0);var h=P(g,a);return r.getTime()>=m.getTime()?i+1:r.getTime()>=h.getTime()?i:i-1}function U(t,n){e(1,arguments);var a=n||{},r=a.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:f(i),s=null==a.firstWeekContainsDate?o:f(a.firstWeekContainsDate),u=L(t,n),c=new Date(0);c.setUTCFullYear(u,0,s),c.setUTCHours(0,0,0,0);var d=P(c,n);return d}var N=6048e5;function O(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+h(i,2)}function A(e,t){return e%60==0?(e>0?"-":"+")+h(Math.abs(e)/60,2):q(e,t)}function q(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+h(Math.floor(r/60),2)+n+h(r%60,2)}const _={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});case"GGGG":default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return p(e,t)},Y:function(e,t,n,a){var r=L(e,a),i=r>0?r:1-r;return"YY"===t?h(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):h(i,t.length)},R:function(e,t){return h(S(e),t.length)},u:function(e,t){return h(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return h(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return h(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return v(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return h(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(n,a,r,i){var o=function(n,a){e(1,arguments);var r=t(n),i=P(r,a).getTime()-U(r,a).getTime();return Math.round(i/N)+1}(n,i);return"wo"===a?r.ordinalNumber(o,{unit:"week"}):h(o,a.length)},I:function(n,a,r){var i=function(n){e(1,arguments);var a=t(n),r=x(a).getTime()-M(a).getTime();return Math.round(r/E)+1}(n);return"Io"===a?r.ordinalNumber(i,{unit:"week"}):h(i,a.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):y(e,t)},D:function(n,a,r){var i=function(n){e(1,arguments);var a=t(n),r=a.getTime();a.setUTCMonth(0,1),a.setUTCHours(0,0,0,0);var i=a.getTime(),o=r-i;return Math.floor(o/C)+1}(n);return"Do"===a?r.ordinalNumber(i,{unit:"dayOfYear"}):h(i,a.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});case"EEEE":default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return h(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});case"eeee":default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return h(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});case"cccc":default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return h(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});case"iiii":default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return w(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):b(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):h(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):h(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):T(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):k(e,t)},S:function(e,t){return D(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return A(r);case"XXXX":case"XX":return q(r);case"XXXXX":case"XXX":default:return q(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return A(r);case"xxxx":case"xx":return q(r);case"xxxxx":case"xxx":default:return q(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+O(r,":");case"OOOO":default:return"GMT"+q(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+O(r,":");case"zzzz":default:return"GMT"+q(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return h(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return h((a._originalDate||e).getTime(),t.length)}};function W(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function H(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const I={p:H,P:function(e,t){var n,a=e.match(/(P+)(p+)?/),r=a[1],i=a[2];if(!i)return W(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",W(r,t)).replace("{{time}}",H(i,t))}};var Y=6e4;function B(e){return e.getTime()%Y}function j(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var a=n>0?(Y+B(t))%Y:B(t);return n*Y+a}var G=["D","DD"],R=["YY","YYYY"];function z(e){return-1!==G.indexOf(e)}function X(e){return-1!==R.indexOf(e)}function F(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Q=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,J=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,V=/^'([^]*?)'?$/,$=/''/g,K=/[a-zA-Z]/;function Z(e){return e.match(V)[1].replace($,"'")}var ee=n(877),te='\n            <div class="list__item" data-id="%%ID%%" data-tag="%%TAG%%">\n              <div class="cover">&nbsp;</div>\n              <div class="done__icon-div">\n                <svg class="icon %%SHOW%%">\n                  <use xlink:href="./img/sprite.svg#icon-checkmark"></use>\n                </svg>\n              </div>\n              <div class="list__item--description">\n                <span class="top">%%TITLE%%</span>\n                <div class="bottom">\n                  <svg class="icon time-icon">\n                    <use xlink:href="./img/sprite.svg#icon-access_time"></use>\n                  </svg>\n                  <span class="due-date">%%DUEDATE%%</span>\n                  \x3c!--\n                  <svg class="icon notif-icon">\n                    <use\n                      xlink:href="./img/sprite.svg#icon-notifications-outline"\n                    ></use>\n                  </svg>\n                  --\x3e\n                </div>\n              </div>\n              <svg id="%%STARICON%%" class="icon star-icon">\n              <use xlink:href="./img/sprite.svg#icon-star-o"></use>\n              </svg>\n              <span class="delete">x</span>\n            </div>';function ne(e){return(ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var ae={addTaskBtn:document.querySelector(".sidebar__add"),form:document.querySelector(".form"),popup:document.querySelector(".add-popup"),popupCloseBtn:document.querySelector(".close-popup"),taskTitle:document.querySelector("#title"),taskDescription:document.querySelector("#description"),taskDueDate:document.querySelector("#deadline"),taskTag:document.querySelector("#tag"),taskSubmitBtn:document.querySelector(".submit-btn"),taskList:document.querySelector(".list__content"),detailSection:document.querySelector(".detail"),tagList:document.querySelector(".sidebar__tag"),taskListHeaderText:document.querySelector(".list__header--text"),sidebarOverview:document.querySelector(".sidebar__overview"),sidebarDone:document.querySelector(".sidebar__done"),sidebarImportant:document.querySelector(".sidebar__important"),sidebarToday:document.querySelector(".sidebar__today"),searchInput:document.querySelector(".search__input"),pageNext:document.querySelector(".page__next"),pagePrev:document.querySelector(".page__prev"),deleteBtn:document.querySelector(".delete")},re=function(){ae.form.style.opacity=1,ae.form.style.visibility="visible",ae.popup.style.opacity=1,ae.popup.style.visibility="visible"},ie=function(){ae.form.style.opacity=0,ae.form.style.visibility="hidden",ae.popup.style.opacity=0,ae.popup.style.visibility="hidden"},oe=function(e,t){return e.taskDueDate<t.taskDueDate?-1:e.taskDueDate>t.taskDueDate?1:0},se=function(e,t){e.forEach((function(e,n,a){e.id===t&&a.splice(n,1)}))};function ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}!function(e,t){var n,a=e.DOM,r=(a.addTaskBtn,a.form),i=a.taskList,o=a.tagList,s=a.sidebarOverview,u=a.sidebarDone,c=a.sidebarImportant,d=a.sidebarToday,l=a.searchInput,f=a.pageNext,m=a.pagePrev,g=(a.deleteBtn,{tasks:[],tags:{},completed:[],important:[]}),h=function(){localStorage.setItem("state",JSON.stringify(g))},p=1;window.addEventListener("load",(function(a){JSON.parse(localStorage.getItem("state"))?g=JSON.parse(localStorage.getItem("state")):h(),t.sortTasksByDate(g.tasks),p=1,n=g.tasks,e.showPageNumbers(g.tasks,p),t.pageCtrl(g.tasks,e.renderTask,p),g.tags&&e.renderTags(g),document.querySelector(".loadingio-spinner-wedges-cqyhjjq8b24").style.display="none"}));var v=function e(t){var n=t.taskTitle,a=t.taskDescription,r=t.taskDueDate,i=t.taskTag,o=t.id,s=t.formattedDueDate;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.taskTitle=n,this.taskDescription=a,this.taskDueDate=r,this.taskTag=i,this.id=o,this.formattedDueDate=s,this.important=""};e.popupEvents(),r.addEventListener("submit",(function(a){a.preventDefault();var r=e.getUserInput(v,g);t.sortTasksByDate(g.tasks),p=1,n=g.tasks,e.showPageNumbers(g.tasks,p),t.pageCtrl(g.tasks,e.renderTask,p),e.getTags(g,r,r.taskTag),e.renderTags(g),h()})),i.addEventListener("click",(function(a){var r=a.target.className,i=a.target.classList;if("cover"===r){var o=a.target.parentNode.getAttribute("data-id");e.renderTaskDetails(g,o)}if("done__icon-div"===r){var s=a.target.parentNode.getAttribute("data-id"),u=a.target.parentNode.getAttribute("data-tag");t.removeCompleted(g,s,u),t.sortTasksByDate(g.tasks),e.showPageNumbers(n,p=1),t.pageCtrl(n,e.renderTask,p),e.changeHeader("",n,g),e.renderTags(g),h(),changeHeader}if("star-icon"===i[1]){var c=a.target.parentNode.getAttribute("data-id");t.toggleImportant(g,c),t.sortTasksByDate(g.tasks),e.showPageNumbers(n,p=1),t.pageCtrl(n,e.renderTask,p),e.changeHeader("",n,g),h()}if("delete"===r){var d=a.target.parentNode.getAttribute("data-id"),l=a.target.parentNode.getAttribute("data-tag");t.deleteTask(g,d,l),t.sortTasksByDate(g.tasks),e.showPageNumbers(n,p=1),t.pageCtrl(n,e.renderTask,p),e.changeHeader("",n,g),e.renderTags(g),h()}})),o.addEventListener("click",(function(n){var a,r,i=(a=n.target.classList,r=2,function(e){if(Array.isArray(e))return e}(a)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],a=!0,r=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(a=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);a=!0);}catch(e){r=!0,i=e}finally{try{a||null==s.return||s.return()}finally{if(r)throw i}}return n}}(a,r)||function(e,t){if(e){if("string"==typeof e)return ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ue(e,t):void 0}}(a,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[0];"cover"===i[1]&&e.renderTaskByTags(g.tags,o,t.sortTasksByDate)})),s.addEventListener("click",(function(a){t.sortTasksByDate(g.tasks),p=1,n=g.tasks,e.showPageNumbers(g.tasks,p),t.pageCtrl(g.tasks,e.renderTask,p),h()})),u.addEventListener("click",(function(a){t.sortTasksByDate(g.completed),p=1,n=g.completed,e.showPageNumbers(g.completed,p),t.pageCtrl(g.completed,e.renderTask,p,"show"),e.changeHeader("Completed")})),c.addEventListener("click",(function(a){t.sortTasksByDate(g.important),p=1,n=g.important,e.showPageNumbers(g.important,p),t.pageCtrl(g.important,e.renderTask,p),e.changeHeader("Important")})),d.addEventListener("click",(function(t){e.renderToday(g)})),l.addEventListener("input",(function(n){var a=n.target.value;t.searchTask(g,a,e.renderTask)})),f.addEventListener("click",(function(a){p+=1;var r="";n===g.completed&&(r="show"),e.showPageNumbers(n,p),t.pageCtrl(n,e.renderTask,p,r)})),m.addEventListener("click",(function(a){p-=1;var r="";n===g.completed&&(r="show"),e.showPageNumbers(n,p),t.pageCtrl(n,e.renderTask,p,r)})),window.addEventListener("onload",(function(e){}))}({DOM:ae,popupOpen:re,popupClose:ie,popupEvents:function(){ae.addTaskBtn.addEventListener("click",(function(e){re()})),ae.popupCloseBtn.addEventListener("click",(function(e){ie()}))},getUserInput:function(n,r){var i=ae.taskTitle.value,o=ae.taskDescription.value,s=new Date(ae.taskDueDate.value),u=ae.taskTag.value.toLowerCase(),c=(0,ee.v4)(),d=function(n,r,i){e(2,arguments);var o=String(r),s=i||{},u=s.locale||l,c=u.options&&u.options.firstWeekContainsDate,d=null==c?1:f(c),m=null==s.firstWeekContainsDate?d:f(s.firstWeekContainsDate);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=u.options&&u.options.weekStartsOn,p=null==h?0:f(h),v=null==s.weekStartsOn?p:f(s.weekStartsOn);if(!(v>=0&&v<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var y=t(n);if(!a(y))throw new RangeError("Invalid time value");var w=j(y),b=g(y,w),T={firstWeekContainsDate:m,weekStartsOn:v,locale:u,_originalDate:y};return o.match(J).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,I[t])(e,u.formatLong,T):e})).join("").match(Q).map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return Z(e);var a=_[t];if(a)return!s.useAdditionalWeekYearTokens&&X(e)&&F(e,r,n),!s.useAdditionalDayOfYearTokens&&z(e)&&F(e,r,n),a(b,e,u.localize,T);if(t.match(K))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("")}(s,"EEE, do MMM `yy");if(i&&d){var m=new n({taskTitle:i,taskDescription:o,taskDueDate:s,taskTag:u||"Primary",id:c,formattedDueDate:d});return r.tasks.push(m),ae.taskTitle.value="",ae.taskDescription.value="",ae.taskDueDate.value="",ae.taskTag.value="",ie(ae.form,ae.addPopup),m}},renderTask:function(e,t){var n;e&&(ae.taskList.innerHTML="",ae.taskListHeaderText.textContent="All",e.forEach((function(e){n=te,n=t?n.replace("%%SHOW%%","show"):n.replace("%%SHOW%%","hide"),n=(n=(n=(n=(n="yes"===e.important?n.replace("%%STARICON%%","red"):n.replace("%%STARICON%%","black")).replace("%%TITLE%%",e.taskTitle)).replace("%%DUEDATE%%",e.formattedDueDate)).replace("%%ID%%",e.id)).replace("%%TAG%%",e.taskTag),ae.taskList.insertAdjacentHTML("beforeend",n)})))},renderTaskDetails:function(e,t){var n='  \n            <div class="detail__icon">\n            <svg class="icon done-icon">\n              <use xlink:href="./img/sprite.svg#icon-"></use>\n            </svg>\n          </div>\n      \n          <div class="detail__content">\n            <div class="detail__header">\n              <div class="top">\n                <span>%%DETAILTITLE%%</span>\n                <div class="icon-div">\n                  <svg class="icon">\n                    <use\n                      xlink:href="./img/sprite.svg#icon-dots-horizontal-triple"\n                    ></use>\n                  </svg>\n                  \x3c!--\n                  <svg class="icon">\n                    <use\n                      xlink:href="./img/sprite.svg#icon-dots-horizontal-triple"\n                    ></use>\n                  </svg>\n                  --\x3e\n                </div>\n              </div>\n              <div class="bottom">\n                <div class="date">\n                  <svg class="icon">\n                    <use xlink:href="./img/sprite.svg#icon-access_time"></use>\n                  </svg>\n                  <span>%%DETAILDUEDATE%%</span>\n                </div>\n                \x3c!--\n                <div class="reminder">\n                  <svg class="icon">\n                    <use xlink:href="./img/sprite.svg#icon-alarmclock"></use>\n                  </svg>\n                  <span>Remind me at 9:15am</span>\n                </div>\n                --\x3e\n              </div>\n            </div>\n            <p class="detail__text">\n              %%DETAILDESCRIPTION%%\n            </p>\n            \n            \x3c!--\n            <div class="detail__step">\n              <a class="detail__step--add"> &#43; Add step </a>\n              <div class="detail__step--item">\n                <input type="checkbox" name="" id="step item" />\n                <label for="step item">play soccer</label>\n              </div>\n\n              <div class="detail__step--item">\n                <input type="checkbox" name="" id="step item" />\n                <label for="step item">music lesson</label>\n              </div>\n              <div class="detail__step--item">\n                <input type="checkbox" name="" id="step item" />\n                <label for="step item">visit the dentist</label>\n              </div>\n            </div>\n            --\x3e\n          </div>';ae.detailSection.innerHTML="",e.tasks.forEach((function(e){e.id===t&&(n=(n=(n=n.replace("%%DETAILTITLE%%",e.taskTitle)).replace("%%DETAILDUEDATE%%",e.formattedDueDate)).replace("%%DETAILDESCRIPTION%%",e.taskDescription),ae.detailSection.insertAdjacentHTML("beforeend",n))}))},getTags:function(e,t,n){if(e.tags[n])e.tags[n].push(t);else{var a=(0,ee.v4)();e.tags[n]=[],e.tags[n].push(a),e.tags[n].push(t)}},renderTags:function(e){var t,n=["blue","yellow","green","pink","red","purple"];for(var a in ae.tagList.innerHTML="",e.tags)t=(t=(t=(t=(t='\n          <div class="sidebar__tag--item sidebar__tag--work">\n            <div class="%%ID%% cover">&nbsp;</div>\n            <span class="tag-color %%TAGCOLOUR%%">&nbsp;</span>\n            <span class="tag-text">%%TAGTITLE%%</span>\n            <span class="tag-count">%%TAGNUMBER%%</span>\n          </div>\n          ').replace("%%TAGTITLE%%","".concat(a[0].toUpperCase()).concat(a.slice(1)))).replace("%%ID%%",e.tags[a][0])).replace("%%TAGNUMBER%%",e.tags[a].length-1)).replace("%%TAGCOLOUR%%",n[Math.floor(6*Math.random())]),ae.tagList.insertAdjacentHTML("beforeend",t)},renderTaskByTags:function(e,t,n){var a;for(var r in ae.taskList.innerHTML="",e)t===e[r][0]&&(ae.taskListHeaderText.textContent="".concat(r[0].toUpperCase()+r.slice(1)),n(e[r]),e[r].forEach((function(e){"object"===ne(e)&&(a=(a=(a=(a=(a=(a=te).replace("%%SHOW%%","hide")).replace("%%TITLE%%",e.taskTitle)).replace("%%DUEDATE%%",e.formattedDueDate)).replace("%%ID%%",e.id)).replace("%%TAG%%",e.taskTag),ae.taskList.insertAdjacentHTML("beforeend",a))})))},changeHeader:function(e,t,n){t&&t&&(t===n.tasks?e="All":t===n.important?e="Important":t===n.completed&&(e="Completed")),ae.taskListHeaderText.textContent=e},renderToday:function(e){var t,n=(new Date).toDateString();ae.taskList.innerHTML="",ae.taskListHeaderText.textContent="Today",e.tasks.forEach((function(e){new Date(e.taskDueDate).toDateString()===n&&(t=te,t=(t=(t=(t=(t=(t="yes"===e.important?t.replace("%%STARICON%%","red"):t.replace("%%STARICON%%","black")).replace("%%SHOW%%","hide")).replace("%%TITLE%%",e.taskTitle)).replace("%%DUEDATE%%",e.formattedDueDate)).replace("%%ID%%",e.id)).replace("%%TAG%%",e.taskTag),ae.taskList.insertAdjacentHTML("beforeend",t))}))},showPageNumbers:function(e,t){var n=Math.ceil(e.length/6);1===t&&n>1?(ae.pageNext.style.display="block",ae.pagePrev.style.display="none"):t<n?(ae.pagePrev.style.display="block",ae.pageNext.style.display="block"):n===t&&n>1?(ae.pagePrev.style.display="block",ae.pageNext.style.display="none"):(ae.pagePrev.style.display="none",ae.pageNext.style.display="none")}},{sortTasksByDate:function(e){e.sort(oe)},removeCompleted:function(e,t,n){e.tasks.forEach((function(n,a){n.id===t&&(e.completed.push(n),e.tasks.splice(a,1),e.important.splice(a,1),document.querySelector(".detail").innerHTML="")})),e.tags[n].forEach((function(a,r){a.id===t&&e.tags[n].splice(r,1)}))},toggleImportant:function(e,t){e.tasks.forEach((function(n){n.id===t&&(e.important.indexOf(n)<0&&e.completed.indexOf(n)<0?(n.important="yes",e.important.push(n)):(n.important="",e.important.forEach((function(n,a){n.id===t&&e.important.splice(a,1)}))))}))},searchTask:function(e,t,n){n(e.tasks.filter((function(e){return e.taskTitle.includes(t)})))},pageCtrl:function(e,t,n,a){var r=6*(n-1),i=6*n;t(e.slice(r,i),a)},deleteTask:function(e,t,n){se(e.tasks,t),se(e.important,t),se(e.completed,t),document.querySelector(".detail").innerHTML="",e.tags[n].forEach((function(a,r){a.id===t&&e.tags[n].splice(r,1)}))}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,